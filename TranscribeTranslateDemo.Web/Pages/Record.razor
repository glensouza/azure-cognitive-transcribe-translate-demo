@page "/record"
@inject HttpClient Http
@inject IJSRuntime JavaScriptRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Audio Test</PageTitle>

<div class="wrapper">
    <header>
        <h1>Speech to Text and Translation</h1>
    </header>
    <section class="main-controls mt-4">
        <h2>Record Speech</h2>
        <canvas class="visualizer"></canvas>
        <button @onclick="RecordAudioStart" class="btn btn-danger" disabled="@disableRecordAudioStart"><span class="oi oi-media-record" aria-hidden="true"></span> Start Record</button>
        <button @onclick="RecordAudioStop" class="btn btn-primary" disabled="@disableRecordAudioStop"><span class="oi oi-media-stop" aria-hidden="true"></span> Stop</button>
    </section>
    <section class="soundClip" hidden="@hideSubmitAudio">
        <h2>Recording Ready to Submit</h2>
        <audio controls src="@blobUrl"></audio>
        <button @onclick="DeleteAudio" class="btn btn-primary"><span class="oi oi-delete" aria-hidden="true"></span> Delete</button>
        <button @onclick="ReRecordAudio" class="btn btn-primary"><span class="oi oi-loop-circular" aria-hidden="true"></span> Record Again</button>
        <button @onclick="SubmitAudio" class="btn btn-primary"><span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Upload</button>
    </section>
    <section style="max-width: 800px">
        <ul>
            <li>RowKey: @rowKey</li>
            <li>Transcription: @transcription</li>
            <li>Translation: @translation</li>
            <li>Text-To-Speech: @textToSpeech <a href="@textToSpeech" target="_blank">link</a></li>
        </ul>
    </section>
</div>

@code {
    bool disableRecordAudioStart = false;
    bool disableRecordAudioStop = true;
    bool hideSubmitAudio = true;
    string blobUrl = string.Empty;
    private HubConnection? hubConnection;
    private string userId = string.Empty;
    private string apiLocation = string.Empty;
    string rowKey = string.Empty;
    string transcription = string.Empty;
    string translation = string.Empty;
    string textToSpeech = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        userId = await LocalStorage.GetItemAsync<string>("userId");
        apiLocation = Http.BaseAddress?.ToString() ?? string.Empty;

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{apiLocation}api", options => { options.Headers = new Dictionary<string, string> { ["x-ms-client-principal-id"] = userId }; })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>(NotificationTypes.TextToSpeech, (message) =>
        {
            textToSpeech = message;
            StateHasChanged();
        });

        hubConnection.On<string>(NotificationTypes.Transcription, (message) =>
        {
            transcription = message;
            StateHasChanged();
        });

        hubConnection.On<string>(NotificationTypes.Translation, (message) =>
        {
            translation = message;
            StateHasChanged();
        });

        hubConnection.On<string>(NotificationTypes.RowKey, (message) =>
        {
            rowKey = message;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JavaScriptRuntime.InvokeVoidAsync("AudioRecorder.Init", DotNetObjectReference.Create(this));
    }

    private void RecordAudioStart()
    {
        Clear();
        disableRecordAudioStart = true;
        disableRecordAudioStop = false;
        JavaScriptRuntime.InvokeVoidAsync("AudioRecorder.Record");
    }

    private void RecordAudioStop()
    {
        disableRecordAudioStart = false;
        disableRecordAudioStop = true;
        JavaScriptRuntime.InvokeVoidAsync("AudioRecorder.Stop");
    }

    private async Task SubmitAudio()
    {
        //hideSubmitAudio = true;
        //blobUrl = string.Empty;
        //await InvokeAsync(StateHasChanged);
        _ = JavaScriptRuntime.InvokeVoidAsync("AudioRecorder.Upload", apiLocation, userId);
    }

    private async Task ReRecordAudio()
    {
        Clear();
        disableRecordAudioStart = true;
        disableRecordAudioStop = false;
        await InvokeAsync(StateHasChanged);
        _ = JavaScriptRuntime.InvokeVoidAsync("AudioRecorder.Record");
    }

    private async Task DeleteAudio()
    {
        Clear();
        await InvokeAsync(StateHasChanged);
    }

    private void Clear()
    {
        hideSubmitAudio = true;
        blobUrl = string.Empty;
        rowKey = string.Empty;
        transcription = string.Empty;
        translation = string.Empty;
        textToSpeech = string.Empty;
    }

    [JSInvokable]
    public async Task OnAudioUrl(string url)
    {
        //if (!string.IsNullOrEmpty(blob))
        //{
        //    var audioBytes = Encoder.GetBytes(blob);
  
        //    await File.WriteAllBytesAsync("audio.wav", audioBytes);
        //}

        // MemoryStream blob
        //byte[] ss = blob.ToArray();
        //await blob.DisposeAsync();
        blobUrl = url;
        hideSubmitAudio = false;
        await InvokeAsync(StateHasChanged);
    }
}
