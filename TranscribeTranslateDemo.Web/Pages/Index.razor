@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Diagnostics

<PageTitle>Index</PageTitle>

<h2>Transcription: @transcription</h2>
<h2>Translation: @translation</h2>

<h3>@userId</h3>

<h1>Hello, world!</h1>

Welcome to your new app

<SurveyPrompt Title="How is Blazor working for you?" />

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<h1>Weather forecast.</h1>

<p>This component demonstrates fetching data from the function.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (WeatherForecast? forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private int currentCount = 0;
    private WeatherForecast[]? forecasts;
    private HubConnection? hubConnection;
    private string? apiLocation = string.Empty;
    private string transcription = string.Empty;
    private string translation = string.Empty;
    private string userId = string.Empty;

    private async Task IncrementCount()
    {
        currentCount++;
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[] { };
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        this.apiLocation = Http.BaseAddress?.ToString();
        if (string.IsNullOrEmpty(this.apiLocation))
        {
            throw new InvalidDataException();
        }

        string userId = Http.DefaultRequestHeaders.GetValues("x-ms-client-principal-id").First();
        this.userId = userId;
        Console.WriteLine(userId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{apiLocation}api", options => { options.Headers = new Dictionary<string, string> { ["x-ms-client-principal-id"] = userId }; })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("transcription", (message) =>
        {
            this.transcription = message;
            StateHasChanged();
        });

        hubConnection.On<string>("translation", (message) =>
        {
            this.translation = message;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[] { };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            forecasts = new WeatherForecast[] { };
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
